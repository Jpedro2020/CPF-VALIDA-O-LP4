{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jo\\xE3o\\\\Desktop\\\\VALIDAR CPF\\\\cpf\\\\src\\\\components\\\\Validar.js\";\nimport React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, Input, Alert } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Validar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.AtualizaDados = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.Valida = () => {\n      //buscar o cpf informado que está em state.input\n      let cpfBruto = this.state.input; //formatar o número tirando o que não for número.\n\n      let cpf = cpfBruto.replace(/\\D+/g, '');\n      console.log(cpf); //1º conjunto de 3 dígitos\n\n      const d1S = cpf.slice(0, 1);\n      const d2S = cpf.slice(1, 2);\n      const d3S = cpf.slice(2, 3);\n      const d1 = parseInt(d1S);\n      const d2 = parseInt(d2S);\n      const d3 = parseInt(d3S); //2º conjunto de 3 dígitos\n\n      const d4S = cpf.slice(3, 4);\n      const d5S = cpf.slice(4, 5);\n      const d6S = cpf.slice(5, 6);\n      const d4 = parseInt(d4S);\n      const d5 = parseInt(d5S);\n      const d6 = parseInt(d6S); //3º conjunto de 3 dígitos\n\n      const d7S = cpf.slice(6, 7);\n      const d8S = cpf.slice(7, 8);\n      const d9S = cpf.slice(8, 9);\n      const d7 = parseInt(d7S);\n      const d8 = parseInt(d8S);\n      const d9 = parseInt(d9S); //verificadores\n\n      const d10S = cpf.slice(9, 10);\n      const d11S = cpf.slice(10, 11);\n      const d10 = parseInt(d10S);\n      const d11 = parseInt(d11S); //Aqui exibo no console o CPF separado em dígitos.\n\n      console.log(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);\n      const soma = d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2; //disso resulta um número\n\n      console.log(`Soma 1º fase: ${soma}`); //aqui verifico o resultado da soma vezes 10 dividido por 11. preciso do resto dessa divisão. \n\n      const resto1 = soma * 10 % 11; //o resto, caso esteja entre 1 e 9 será o meu dígito verificador.\n\n      let ver1 = resto1;\n\n      if (resto1 !== 10) {\n        //atribui a ver1 o valor do próprio resto. Um número entre 1 e 9.\n        ver1 = resto1;\n        console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`);\n      } else {\n        //atribuo a ver1 o valor de 0.\n        ver1 = 0;\n        console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`);\n      }\n\n      ; //aqui faço a 2º fase de somas e multiplicações dos dígitos, agora incluindo o ver1 na conta.\n\n      const soma2 = d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + ver1 * 2; //disso resulta um número.\n\n      console.log(`Soma 2º fase: ${soma2}`); //armazeno aqui o resto da conta de soma2 * 10 % 11. \n\n      const resto2 = soma2 * 10 % 11; //atribuo a var2 o resto2\n\n      let ver2 = resto2; //e mostro...\n\n      console.log(`Resto2: ${resto2}`);\n\n      if (resto2 !== 10) {\n        ver2 = resto2;\n        console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`);\n      } else {\n        ver2 = 0;\n        console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`);\n      }\n\n      ;\n\n      if (d10 === ver1 && d11 === ver2) {\n        //se for é cpf válido\n        console.log('Válido');\n        const valid = true;\n        this.Altera(valid);\n      } else {\n        console.log('inválido');\n        const valid = false;\n        this.Altera(valid);\n      } // this.Result(this.state.valid)\n      // console.log('aqui')\n\n    };\n\n    this.Altera = v => {\n      console.log(v);\n      this.setState({\n        valid: v\n      });\n      console.log(this.state.valid);\n    };\n\n    this.Result = v => {\n      if (v === true) {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          color: \"success\",\n          children: \"V\\xE1lido! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 22\n        }, this);\n      }\n\n      if (v === '' || v === false) {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          color: \"danger\",\n          children: \"Inv\\xE1lido! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 26\n        }, this);\n      }\n    };\n\n    this.state = {\n      input: '',\n      valid: 'N'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          name: \"cpfInput\",\n          type: \"text\",\n          onChange: this.AtualizaDados\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputGroupAddon, {\n          addonType: \"prepend\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            outline: true,\n            color: \"secondary\",\n            onClick: this.Valida,\n            children: \"Validar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 58\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: this.Result(this.state.valid)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Validar;","map":{"version":3,"sources":["C:/Users/João/Desktop/VALIDAR CPF/cpf/src/components/Validar.js"],"names":["React","Component","Button","InputGroup","InputGroupAddon","Input","Alert","Validar","constructor","props","AtualizaDados","e","setState","input","target","value","Valida","cpfBruto","state","cpf","replace","console","log","d1S","slice","d2S","d3S","d1","parseInt","d2","d3","d4S","d5S","d6S","d4","d5","d6","d7S","d8S","d9S","d7","d8","d9","d10S","d11S","d10","d11","soma","resto1","ver1","soma2","resto2","ver2","valid","Altera","v","Result","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, Input, Alert } from 'reactstrap';\n\nclass Validar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: '',\n            valid: 'N'\n        }\n    }\n\n    AtualizaDados = (e) => {\n        this.setState({ input: e.target.value })\n\n    };\n\n\n    Valida = () => {\n        //buscar o cpf informado que está em state.input\n        let cpfBruto = this.state.input\n        //formatar o número tirando o que não for número.\n        let cpf = cpfBruto.replace(/\\D+/g, '')\n        console.log(cpf)\n\n        //1º conjunto de 3 dígitos\n        const d1S = cpf.slice(0, 1);\n        const d2S = cpf.slice(1, 2);\n        const d3S = cpf.slice(2, 3);\n\n        const d1 = parseInt(d1S);\n        const d2 = parseInt(d2S);\n        const d3 = parseInt(d3S);\n\n        //2º conjunto de 3 dígitos\n        const d4S = cpf.slice(3, 4);\n        const d5S = cpf.slice(4, 5);\n        const d6S = cpf.slice(5, 6);\n\n        const d4 = parseInt(d4S);\n        const d5 = parseInt(d5S);\n        const d6 = parseInt(d6S);\n\n        //3º conjunto de 3 dígitos\n        const d7S = cpf.slice(6, 7);\n        const d8S = cpf.slice(7, 8);\n        const d9S = cpf.slice(8, 9);\n\n        const d7 = parseInt(d7S);\n        const d8 = parseInt(d8S);\n        const d9 = parseInt(d9S);\n\n        //verificadores\n        const d10S = cpf.slice(9, 10);\n        const d11S = cpf.slice(10, 11);\n\n        const d10 = parseInt(d10S);\n        const d11 = parseInt(d11S);\n\n\n        //Aqui exibo no console o CPF separado em dígitos.\n        console.log(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11)\n\n        const soma = (d1 * 10) + (d2 * 9) + (d3 * 8) + (d4 * 7) + (d5 * 6) + (d6 * 5) + (d7 * 4) + (d8 * 3) + (d9 * 2);\n        //disso resulta um número\n        console.log(`Soma 1º fase: ${soma}`);\n\n        //aqui verifico o resultado da soma vezes 10 dividido por 11. preciso do resto dessa divisão. \n        const resto1 = ((soma * 10) % 11);\n        //o resto, caso esteja entre 1 e 9 será o meu dígito verificador.\n        let ver1 = resto1;\n\n\n        if (resto1 !== 10) {\n            //atribui a ver1 o valor do próprio resto. Um número entre 1 e 9.\n            ver1 = resto1;\n            console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`)\n\n        } else {\n            //atribuo a ver1 o valor de 0.\n            ver1 = 0;\n            console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`)\n\n        };\n\n\n        //aqui faço a 2º fase de somas e multiplicações dos dígitos, agora incluindo o ver1 na conta.\n        const soma2 = (d1 * 11) + (d2 * 10) + (d3 * 9) + (d4 * 8) + (d5 * 7) + (d6 * 6) + (d7 * 5) + (d8 * 4) + (d9 * 3) + (ver1 * 2);\n        //disso resulta um número.\n        console.log(`Soma 2º fase: ${soma2}`);\n\n        //armazeno aqui o resto da conta de soma2 * 10 % 11. \n        const resto2 = ((soma2 * 10) % 11);\n        //atribuo a var2 o resto2\n        let ver2 = resto2;\n        //e mostro...\n        console.log(`Resto2: ${resto2}`);\n\n\n        if (resto2 !== 10) {\n            ver2 = resto2;\n            console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`)\n\n        } else {\n            ver2 = 0;\n            console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`)\n\n        };\n\n        if (d10 === ver1 && d11 === ver2) {\n            //se for é cpf válido\n            console.log('Válido')\n            const valid = true;\n            this.Altera(valid)\n\n\n\n        } else {\n            console.log('inválido')\n            const valid = false;\n            this.Altera(valid)\n\n        }\n\n        // this.Result(this.state.valid)\n        // console.log('aqui')\n    };\n\n    Altera = (v) => {\n        console.log(v)\n        this.setState({ valid: v })\n        console.log(this.state.valid)\n\n    }\n\n\n    Result = (v) => {\n        if (v === true) {\n            return ( <Alert color=\"success\">Válido! </Alert>)\n\n        } \n            if (v === '' || v === false) {\n                return ( <Alert color=\"danger\">Inválido! </Alert>)\n}\n\n        \n    }\n\n\n    render() {\n        return (\n            <div>\n                <InputGroup>\n                    <Input name=\"cpfInput\" type=\"text\" onChange={this.AtualizaDados} />\n                    <InputGroupAddon addonType=\"prepend\"><Button outline color=\"secondary\" onClick={this.Valida} >Validar</Button></InputGroupAddon>\n                </InputGroup>\n                <br/>\n                <h3>{this.Result(this.state.valid)}</h3>\n\n            </div>\n        );\n    }\n}\n\n\nexport default Validar;"]},"metadata":{},"sourceType":"module"}