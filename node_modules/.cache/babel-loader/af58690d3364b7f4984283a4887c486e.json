{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jo\\xE3o\\\\Desktop\\\\VALIDAR CPF\\\\cpf\\\\src\\\\components\\\\Gerar.js\";\nimport React, { Component } from 'react';\nimport { Badge, Button } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Gerar extends Component {\n  constructor() {\n    super();\n\n    this.Gerar = () => {\n      //crio uma var pra cada dígito entre 0 e 9 e defino como Number\n      const d1 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d2 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d3 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d4 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d5 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d6 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d7 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d8 = Number(Math.floor(Math.random() * (9 - 0) + 0));\n      const d9 = Number(Math.floor(Math.random() * (9 - 0) + 0)); //os dígitos 10 e 11 são os verificadores. Crio o 1º deles e depois o 2º\n\n      let d10 = (d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10 % 11;\n      ;\n      let d11 = (d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10 % 11; //coloco uma condicional para  caso o resto seja 10 o \n      //valor atribuído será para 0\n\n      const d10p = (d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10 % 11;\n\n      if (d10p >= 10) {\n        d10 = 0;\n      } else {\n        d10 = d10p;\n      }\n\n      ;\n      const d11p = (d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10 % 11;\n\n      if (d11p >= 10) {\n        d11 = 0;\n      } else {\n        d11 = d11p;\n      }\n\n      ; //e aqui crio uma const para o CPF gerado. Isiro texto e pontos. Não tem\n      //problema pois vou \"filtrar\" o que quero disso com uma regEx em seguida.\n\n      const cpf = `${d1}${d2}${d3}.${d4}${d5}${d6}.${d7}${d8}${d9}-${d10}${d11}`;\n      console.log(cpf);\n      this.setState({\n        cpf: cpf\n      });\n    };\n\n    this.state = {\n      cpf: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        outline: true,\n        color: \"info\",\n        onClick: this.Gerar,\n        children: \"Gerar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          color: \"success\",\n          children: this.state.cpf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Gerar;","map":{"version":3,"sources":["C:/Users/João/Desktop/VALIDAR CPF/cpf/src/components/Gerar.js"],"names":["React","Component","Badge","Button","Gerar","constructor","d1","Number","Math","floor","random","d2","d3","d4","d5","d6","d7","d8","d9","d10","d11","d10p","d11p","cpf","console","log","setState","state","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Badge, Button } from 'reactstrap';\n\nclass Gerar extends Component {\n    constructor() {\n        super()\n        this.state = {\n            cpf: ''\n        }\n    }\n\n    Gerar = () => {\n        //crio uma var pra cada dígito entre 0 e 9 e defino como Number\n        const d1 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d2 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d3 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d4 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d5 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d6 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d7 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d8 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d9 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        //os dígitos 10 e 11 são os verificadores. Crio o 1º deles e depois o 2º\n        let d10 = ((d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10) % 11;;\n        let d11 = ((d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10) % 11;\n        //coloco uma condicional para  caso o resto seja 10 o \n        //valor atribuído será para 0\n        const d10p = ((d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10) % 11;\n        if (d10p >= 10) {\n            d10 = 0;\n        } else {\n            d10 = d10p;\n        };\n        const d11p = ((d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10) % 11;\n        if (d11p >= 10) {\n            d11 = 0;\n        } else {\n            d11 = d11p;\n        };\n        //e aqui crio uma const para o CPF gerado. Isiro texto e pontos. Não tem\n        //problema pois vou \"filtrar\" o que quero disso com uma regEx em seguida.\n        const cpf = `${d1}${d2}${d3}.${d4}${d5}${d6}.${d7}${d8}${d9}-${d10}${d11}`;\n        console.log(cpf);\n\n        this.setState({ cpf: cpf })\n\n\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n\n\n                <Button outline color=\"info\" onClick={this.Gerar}>Gerar</Button>\n                <br/><br/>\n\n                <h2><Badge color=\"success\">{this.state.cpf}</Badge></h2>\n\n\n            </div>\n\n        )\n    }\n}\n\n\n\nexport default Gerar;\n"]},"metadata":{},"sourceType":"module"}